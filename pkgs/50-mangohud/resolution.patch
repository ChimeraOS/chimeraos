diff --git a/src/app/main.cpp b/src/app/main.cpp
index ead0384..07051e9 100644
--- a/src/app/main.cpp
+++ b/src/app/main.cpp
@@ -187,11 +187,23 @@ static void msg_read_thread(){
 }
 
 static const char *GamescopeOverlayProperty = "GAMESCOPE_EXTERNAL_OVERLAY";
+int screen_width;
+int screen_height;
+
+void get_resolution() {
+    const GLFWvidmode * mode = glfwGetVideoMode(glfwGetPrimaryMonitor());
+
+    screen_width = mode->width;
+    screen_height = mode->height;
+}
+
 
 static GLFWwindow* init(const char* glsl_version){
-    GLFWwindow *window = glfwCreateWindow(1280, 800, "mangoapp overlay window", NULL, NULL);
+    get_resolution();
+    GLFWwindow *window = glfwCreateWindow(screen_width, screen_height, "mangoapp overlay window", NULL, NULL);
     Display *x11_display = glfwGetX11Display();
     Window x11_window = glfwGetX11Window(window);
+
     if (x11_window && x11_display)
     {
         // Set atom for gamescope to render as an overlay.
@@ -227,7 +239,10 @@ static bool render(GLFWwindow* window) {
     position_layer(sw_stats, params, window_size);
     render_imgui(sw_stats, params, window_size, true);
     overlay_end_frame();
-    glfwSetWindowSize(window, 1280, 800);
+        
+    const GLFWvidmode * mode = glfwGetVideoMode(glfwGetPrimaryMonitor());
+ 
+    glfwSetWindowMonitor(window, glfwGetPrimaryMonitor(), 0, 0, mode->width, mode->height, mode->refreshRate);
     ImGui::EndFrame();
     return last_window_size.x != window_size.x || last_window_size.y != window_size.y;
 }
